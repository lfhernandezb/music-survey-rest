# HTTP Server
server:
  port: 8082 # HTTP (Tomcat) port

# Spring properties
spring:
  application:
    name: musicstyle-service  # Service registers under this name
  freemarker:
    enabled: false           # Ignore Eureka dashboard FreeMarker templates
  thymeleaf:
    cache: false             # Allow Thymeleaf templates to be reloaded at runtime
    prefix: classpath:/accounts-server/templates/    # Trailing / mandatory
  datasource:
    url: jdbc:h2:mem:userapi
    driverClassName: org.h2.Driver
    username: sa
    password: password
    initialization-mode: embedded  # use schema.sql and data.sql
    #spring.jpa.database-platform: org.hibernate.dialect.H2Dialect
  jpa:
    hibernate:
      ddl-auto: none   # no auto create tables based on entities
    defer-datasource-initialization: true  # use schema.sql and data.sql
  h2:
    console:
      enabled: true
  sql:
    init:
      mode: always  # use schema.sql and data.sql
    # Template location for this application only

# Map the error path to error template (for Thymeleaf)
error:
  path: /error

# Discovery Server Access
#  1. DEV ONLY: Reduce the lease renewal interval to speed up registration
#  2. Define URL of registration server (defaultZone)
eureka:
  client:
    #registerWithEureka: false
    #fetchRegistry: false
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
  instance:
    leaseRenewalIntervalInSeconds: 10   # DO NOT DO THIS IN PRODUCTION

#  3. If using the Angel release-train ONLY, give the process a unique instance id
#     so that multiple instances can register when running on SAME host.  This is
#     not needed since release-train Brixton.
#     NOTE-1: spring.application.instance_id is only set when run on Cloud Foundry,
#             so we fallback on the server-port when it is not defined
#     NOTE-2: Syntax ${x:${y}} = use $x if set, otherwise use $y
#   metadataMap:
#     instanceId: ${spring.application.name}:${spring.application.instance_id:${server.port}}

# All of your queries to another microservice will be routed through Ribbon,
#  which talks with Eureka to find the actual address of the microservice
# instance that you need to query.

ribbon:
  http:
    client:
      enabled: true

# Enable actuator access without security checks - DEVELOPMENT ONLY
# Spring Boot 1.5
# management.security.enabled: false
# Spring Boot 2.x
management:
  endpoints:
    web:
      exposure:
        include: '*'